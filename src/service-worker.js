/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { read, utils, write } from 'xlsx';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');

// Checks for Public_url in env, if its not present just assigns .
// const Public_url = process.env.PUBLIC_URL || '.';

registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(self.location.origin + '/index.html'),
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && (url.pathname.endsWith('.png') || url.pathname.endsWith('.ico')), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

registerRoute(
  ({ url }) => {
    if (url.pathname.endsWith("manifest.json")) {
      return true;
    }
    return false;
  },
  new StaleWhileRevalidate({
    cacheName: 'manifest',
    plugins: [
      new ExpirationPlugin({ maxEntries: 1 }),
    ],
  })
);

// import { read, utils, write } from 'xlsx';

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', async (event) => {
  // console.log(self, event);
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
    // self.registration.update();
  }
  if (event.data && event.data.type === "import") {
    const f = await (event.data?.data).arrayBuffer();
    const wb = read(f);
    const data = utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);
    event.ports[0].postMessage(data);
  }
  if (event.data && event.data.type === "export") {
    const f = await write(event.data?.data, { type: 'array', bookType: 'csv' });
    event.ports[0].postMessage({ type: 'export', file: f });
  }
  // if (event.data && event.data.type === "skipWait") {
  //   console.log("skip waiting through message");
  //   self.messageSkipWaiting();
  // }
});

self.addEventListener('fetch', event => {
  console.log("INTERCEPTED");
  console.log(event);
  // console.log(event.request);

  if (event.request.url.startsWith('http://172.26.145.104:5000')) {
    event.respondWith(new Response("No Go Buddy"));
  }
  console.log(event);
});

// Any other custom service worker logic can go here.
// self.addEventListener('fetch', (event) => {
//   console.log(event.request);
//   console.log("intercepting", event.request.method, 'to', event.request.url);
//   const token = 'dummy token';

//   const promise = new Promise((resolve, reject) => {
//     let sourceHeaders = {};
//     for (var pair of event.request.headers.entries()) {
//       sourceHeaders[pair[0]] = pair[1];
//     }
//     const newHeaders = { ...sourceHeaders, 'Authorization': 'Bearer: ' + token };
//     const newRequest = new Request(event.request, { headers: newHeaders }, { mode: 'cors' });
//     resolve(fetch(event.request));
//   });

//   event.responseWith(promise);
// });